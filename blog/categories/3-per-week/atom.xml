<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 3 per week | Jim Nanney]]></title>
  <link href="http://blog.jimnanney.com/blog/categories/3-per-week/atom.xml" rel="self"/>
  <link href="http://blog.jimnanney.com/"/>
  <updated>2013-05-16T06:28:10-05:00</updated>
  <id>http://blog.jimnanney.com/</id>
  <author>
    <name><![CDATA[Jim Nanney]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Happy]]></title>
    <link href="http://blog.jimnanney.com/blog/2013/05/15/code-happy/"/>
    <updated>2013-05-15T22:58:00-05:00</updated>
    <id>http://blog.jimnanney.com/blog/2013/05/15/code-happy</id>
    <content type="html"><![CDATA[<p>What a wonderful day today turned out to be.  I slept so little last night, fought poor variable naming at work, had a phone conversation with another company about possibly coming to work for them, decided it was a bad choice, couldn't nap after work, and after all that, began to enjoy myself.</p>

<p>I pair programmed with a new friend thanks to the #pairwithme hashtag. From sending out that tweet, I met @Mattr. He introduced me to a project that needed some refactoring love.  He drove, I learned lots and contributed a little.  But in the end, I got to become entranced in a new project, and even better, gained a pet project to level up on using pull requests.  I learn best by doing, but occasionally I require the mentoring of someone more versed in the project/language. Open source software and pairing really gives both of those to me.</p>

<p>Overall, it just caused me to get into a happy coding place, one that is collaborative an communicative.</p>

<p>I wish you all find that place.</p>

<h2>Code Happy!</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Remote Pairing Tips]]></title>
    <link href="http://blog.jimnanney.com/blog/2013/05/09/more-remote-pairing-tips/"/>
    <updated>2013-05-09T20:51:00-05:00</updated>
    <id>http://blog.jimnanney.com/blog/2013/05/09/more-remote-pairing-tips</id>
    <content type="html"><![CDATA[<p>In my latest session of what I am learning I have begun setting up an EC2 instance to handle remote pair programming.  The biggest reason to do this is because it eliminates the need to setup so many little pieces at home.  It seems every remote pair session I start, begins with me explaining the ssh command to login to my laptop only to find that my dynamic dns is changed and ssh doesn't work.  Inevitably I also miss that my router has port forwarded ssh to the wrong machine. Then there is the need to make sure a common user is setup, or that the permissions are setup on the socket that tmux uses.</p>

<blockquote><p>In the classic scream of the 80s: STOP THE MADNESS!!!!!!</p></blockquote>

<p>If something is painful, stop, evaluate what makes it painful, and find a way to relieve at least some of it.  In this case, that means stop reconfiguring everything each time and do it once on Amazon's EC2 instances.</p>

<p>So now that the mini rant is done, let me point out some great tips on remote pairing.</p>

<h3>Pick a sensible project</h3>

<p>If this is the first session you and someone else has ever done.  Don't do serious work. Do a code kata, or pick a code retreat style project. This enables you to focus your attention on how you work together, not the problem you are trying to solve.  Pairing is about communicating, and if you don't give yourself time to learn how each other communicates, you won't solve problems together well. If you don't have one, let me suggest one from my friend <a href="http://billgathen.com/" title="My #rubyfriend Bill Gathen">Bill Gathen</a>. He put together the <a href="http://billgathen.com/2013/01/18/7_degrees_of_fizzbuzz.html" title="7 Degrees of Fizzbuzz, learning ruby for beginners, kata for old hands">7 Degrees of Fizzbuzz</a> for the groups he teaches.</p>

<h3>Start your tools with vanilla config files</h3>

<p>If you both have wildly differing vim configurations and key remappings, only one person will be comfortable driving. Also, the same goes for tmux configs. A remapped leader key kills productivity for the driver.</p>

<h3>Setup your login motd to explain how to get the session started</h3>

<p>I can't tell you how well this works to ease the nerves of the begining pair and sets the tone for the rest of the session.</p>

<p>Here's mine as an example</p>

<p>```</p>

<hr />

<p> ( )  _  ( )       (<em> )                               <br/>
 | | ( ) | |   <strong>   | |    </strong></em>    _     <strong><em> </em></strong>     <strong><br/>
 | | | | | | /'</strong><code>\ | |  /'___) /'_</code>\ /' _ <code>_</code>\ /'<strong><code>\
 | (_/ \_) |(  ___/ | | ( (___ ( (_) )| ( ) ( ) |(  ___/
</code>_</strong>x<strong><em>/'<code>\____)(___)</code>_</em></strong>)<code>\___/'(_) (_) (_)</code>____)</p>

<p>I'm glad you could join me in my journey of learning Ruby,
Rails, vim, and tmux. I am still new in so many regards, and
I welcome your inputs, criticisms, and patience with my knowledge.
I am sure we will both work well together.</p>

<p>Now that you have logged in, you can join my pairing session
by typing the following at your prompt:</p>

<p><del>
tmux -S /usr/local/tmux/learning attach
</del></p>

<p>Then increase the size of your terminal as far as it can go.
If your screen resolution is larger than 1920x1200 your terminal
will be filled with dots outside of my screen's resolution.</p>

<p>I tend to tab complete alot.  In Mac terminals this causes a <em>lot</em>
of audible bell sounds. If you want to turn them off, go to preferences,
Settings, and under the advanced tab, uncheck audible bell.</p>

<p>Happy Pairing!</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM Automatic Registers]]></title>
    <link href="http://blog.jimnanney.com/blog/2013/05/06/vim-automatic-registers/"/>
    <updated>2013-05-06T19:48:00-05:00</updated>
    <id>http://blog.jimnanney.com/blog/2013/05/06/vim-automatic-registers</id>
    <content type="html"><![CDATA[<p>Vim adventures has taught me an incredible new (to me) trick.  The ability to paste a previously deleted line is easy.  Use <strong>p</strong> or <strong>P</strong> to paste it.  But what if it was the third time you hit <strong>dd</strong> and you wanted to paste in the first thing you deleted.  I cannot begin to count the number of times I needed to do that.  Further down, I'll reveal this secret, but first the backstory:</p>

<p>Recently I saw a link to <a href="http://vim-adventures.com/" title="Vim Adventures">Vim-Adventures.com</a> and followed.  It was appealing, but seemed basic in the first three levels.  So I decided not to purchase the subscription.</p>

<p>And then, at Rails Conf 2013 in Portland, I met up with a friend who was working through one of the levels.  I immediately asked if she was playing vim adventures and she said yes and that she was stuck.  Of course I offered to assist.  This proved several points to me right away.</p>

<blockquote><p>First, I am not as good with VIM as I had thought.</p>

<p>Second, I am a horrible teacher of things I have little grasp on.</p>

<p>Third, Vim Adventures advances terribly quick after level 3 and is well worth the subscription.</p></blockquote>

<p>It was inevitable afterwards that I subscribed.  I have learned a ton, and the most profound ended up being the automatic buffers.</p>

<p>Here's how they work:</p>

<p>Given these lines:
<code>
Delete me last.
Delete me third.
Delete me first.
</code></p>

<p>If you delete line three by using <strong>dd</strong>, followed by line one with another <strong>dd</strong> and then line two with again a <strong>dd</strong>, several deletion registers would be created.</p>

<p>You can see these by typing <strong>:reg</strong></p>

<p>First, notice they are numbered from <strong>"1</strong> to <strong>"9</strong> and that they are in order from first in to last in. They also rotate out as more are added.</p>

<p>So to paste the first deletion from above, you would use <strong>"3p</strong></p>

<p>This simple thing has bothered me many times, but not enough to look it up. After playing vim adventures to level 10, I've learned this new trick.</p>
]]></content>
  </entry>
  
</feed>
