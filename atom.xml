<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jim Nanney]]></title>
  <link href="http://blog.jimnanney.com/atom.xml" rel="self"/>
  <link href="http://blog.jimnanney.com/"/>
  <updated>2012-11-25T00:02:05-06:00</updated>
  <id>http://blog.jimnanney.com/</id>
  <author>
    <name><![CDATA[Jim Nanney]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My tmux config Explained]]></title>
    <link href="http://blog.jimnanney.com/blog/2012/11/24/my-tmux-config-explained/"/>
    <updated>2012-11-24T21:28:00-06:00</updated>
    <id>http://blog.jimnanney.com/blog/2012/11/24/my-tmux-config-explained</id>
    <content type="html"><![CDATA[<p>Before I get too far into my posts on pairing I wanted to start adding my configuration files and why I have the chosen to use the pieces in them.</p>

<p>I must admit that prior to this week I had never used tmux.  I heard the ruby rogues talk about it on their podacst. However, being a previous Linux admin, I have used and taught others to use screen for any task that was important, or long running.  Largely due to the simple fact that a session could be detached and reattached.</p>

<p>Tmux is like screen on steroids.  I have never used panes within screen and tmux makes this easy to do.  With a few customizations it is incredibly useful, and your fingers rarely leave the home row on a keyboard!</p>

<!-- more -->


<p>
So before I break out the sections of my tmux.conf, I&#8217;ll present it in its entirety here.  As an aside, each of these things I got from Brian P. Hogan&#8217;s book called <a href="http://pragprog.com/book/bhtmux/tmux">&#8220;tmux: Productive Mouse-Free Development&#8221;</a>. (Not a referral link)</p>

<div><script src='https://gist.github.com/4142309.js?file='></script>
<noscript><pre><code>set -g prefix C-a
unbind C-b
set -s escape-time 1
set -g base-index 1
set -g pane-base-index 1
bind r source-file ~/.tmux.conf\; display &quot;Reloaded!&quot;
bind C-a send-prefix
bind | split-window -h
bind - split-window -v
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
set -g repeat-time 1000
set -g status-bg colour33
setw -g mode-keys vi</code></pre></noscript></div>


<p>Firstly, in screen every command is prefixed with Control A.  Tmux uses Control B.  I remap it to Control A and unbind the original Control B.  This is also very useful if you remap your caps lock key to control as then your fingers do not leave the home row.</p>

<figure class='code'><figcaption><span>Remap Prefix to Control-A </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set -g prefix C-a
</span><span class='line'>unbind C-b</span></code></pre></td></tr></table></div></figure>


<p>Next I set the escape detection time low to avoid conflicts with vim.  Further detail on this can be found in Brian P. Hogan&#8217;s book, but trust me, if you use vim in a tmux session, you&#8217;ll want this.</p>

<figure class='code'><figcaption><span>Fix Escape Detection </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set -s escape-time 1</span></code></pre></td></tr></table></div></figure>


<p>These next two are convenience only and should make VB programmers happy :P  All they do is set the start value of the numbering schemes for windows and panes to 1 instead of 0.</p>

<figure class='code'><figcaption><span>Renumber from 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set -g base-index 1
</span><span class='line'>set -g pane-base-index 1</span></code></pre></td></tr></table></div></figure>


<p>Next while editing the tmux.conf file I want to be able to reload it with a shortcut key instead of <code>C-A :</code> followed by typing <code>source-file ~/.tmux.conf</code></p>

<figure class='code'><figcaption><span>Reload </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind r source-file ~/.tmux.conf\; display "Reloaded!"</span></code></pre></td></tr></table></div></figure>


<p>I also don&#8217;t want to remap away C-A from whatever programs I am using.  So I hit C-A twice and it gets sent to the underlying program instead of tmux with the following.</p>

<figure class='code'><figcaption><span>Send C-a to program </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind C-a send-prefix</span></code></pre></td></tr></table></div></figure>


<p>Tmux lets you split a window into panes horizontally and vertically with <code>C-a %</code> and <code>C-a "</code>  But the pipe and dash are more intuitive.</p>

<figure class='code'><figcaption><span>More intuitive Window Pane Splits </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind | split-window -h
</span><span class='line'>bind - split-window -v</span></code></pre></td></tr></table></div></figure>


<p>Now for the fun stuff.  I use vim constantly.  I am not good at it, but I use it nonetheless.  I want to move around the panes using vim&#8217;s movement keys.</p>

<figure class='code'><figcaption><span>Use vim&#8217;s h j k l movement keys </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind h select-pane -L
</span><span class='line'>bind j select-pane -D
</span><span class='line'>bind k select-pane -U
</span><span class='line'>bind l select-pane -R</span></code></pre></td></tr></table></div></figure>


<p>Switching windows should be the same way, using vim&#8217;s h and l movement keys. The -r makes it repeatable without having to press C-a again.</p>

<figure class='code'><figcaption><span>Use vim&#8217;s h and l to switch windows </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind -r C-h select-window -t :-
</span><span class='line'>bind -r C-l select-window -t :+</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s now add vim movement key emulations that go to resizing a pane.  The defaults are C-Arrow keys, but this isn&#8217;t home row friendly.  Again notice the -r. And also notice that the movement keys are capitalized.</p>

<figure class='code'><figcaption><span>Resize from home row keys </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind -r H resize-pane -L 5
</span><span class='line'>bind -r J resize-pane -D 5
</span><span class='line'>bind -r K resize-pane -U 5
</span><span class='line'>bind -r L resize-pane -R 5</span></code></pre></td></tr></table></div></figure>


<p>Now some of you are faster typists than I and won&#8217;t need this.  But I don&#8217;t want to repeat the C-a while resizing and I may pause less than a second to see the change.  This 1000 represents 1 whole second to repeat my last keystroke.</p>

<figure class='code'><figcaption><span>Longer delay for allowing a repeated keystroke </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set -g repeat-time 1000</span></code></pre></td></tr></table></div></figure>


<p>Next is the colors, which I&#8217;ll leave for you to get your own color schemes.  I am definitely not a designer.</p>

<p>Lastly when in the scroll mode which allows copy and scrollbuffer movement, I want to use the vi keystrokes to navigate the scrollbuffer.</p>

<figure class='code'><figcaption><span>Scroll Buffer Movement like Vim </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setw -g mode-keys vi</span></code></pre></td></tr></table></div></figure>


<p>And that is the end of my .tmux.conf explanation.  These will get you moving like vim and splitting panes all over the place.  Enjoy!</p>
]]></content>
  </entry>
  
</feed>
