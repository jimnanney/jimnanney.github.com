<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jim Nanney]]></title>
  <link href="http://blog.jimnanney.com/atom.xml" rel="self"/>
  <link href="http://blog.jimnanney.com/"/>
  <updated>2013-05-09T22:00:54-05:00</updated>
  <id>http://blog.jimnanney.com/</id>
  <author>
    <name><![CDATA[Jim Nanney]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[More Remote Pairing Tips]]></title>
    <link href="http://blog.jimnanney.com/blog/2013/05/09/more-remote-pairing-tips/"/>
    <updated>2013-05-09T20:51:00-05:00</updated>
    <id>http://blog.jimnanney.com/blog/2013/05/09/more-remote-pairing-tips</id>
    <content type="html"><![CDATA[<p>In my latest session of what I am learning I have begun setting up an EC2 instance to handle remote pair programming.  The biggest reason to do this is because it eliminates the need to setup so many little pieces at home.  It seems every remote pair session I start, begins with me explaining the ssh command to login to my laptop only to find that my dynamic dns is changed and ssh doesn&#8217;t work.  Inevitably I also miss that my router has port forwarded ssh to the wrong machine. Then there is the need to make sure a common user is setup, or that the permissions are setup on the socket that tmux uses.</p>

<blockquote><p>In the classic scream of the 80s: STOP THE MADNESS!!!!!!</p></blockquote>

<p>If something is painful, stop, evaluate what makes it painful, and find a way to relieve at least some of it.  In this case, that means stop reconfiguring everything each time and do it once on Amazon&#8217;s EC2 instances.</p>

<p>So now that the mini rant is done, let me point out some great tips on remote pairing.</p>

<h3>Pick a sensible project</h3>

<p>If this is the first session you and someone else has ever done.  Don&#8217;t do serious work. Do a code kata, or pick a code retreat style project. This enables you to focus your attention on how you work together, not the problem you are trying to solve.  Pairing is about communicating, and if you don&#8217;t give yourself time to learn how each other communicates, you won&#8217;t solve problems together well. If you don&#8217;t have one, let me suggest one from my friend <a href="http://billgathen.com/" title="My #rubyfriend Bill Gathen">Bill Gathen</a>. He put together the <a href="http://billgathen.com/2013/01/18/7_degrees_of_fizzbuzz.html" title="7 Degrees of Fizzbuzz, learning ruby for beginners, kata for old hands">7 Degrees of Fizzbuzz</a> for the groups he teaches.</p>

<h3>Start your tools with vanilla config files</h3>

<p>If you both have wildly differing vim configurations and key remappings, only one person will be comfortable driving. Also, the same goes for tmux configs. A remapped leader key kills productivity for the driver.</p>

<h3>Setup your login motd to explain how to get the session started</h3>

<p>I can&#8217;t tell you how well this works to ease the nerves of the begining pair and sets the tone for the rest of the session.</p>

<p>Here&#8217;s mine as an example</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  _       _         _                                   
</span><span class='line'> ( )  _  ( )       (_ )                                 
</span><span class='line'> | | ( ) | |   __   | |    ___    _     ___ ___     __  
</span><span class='line'> | | | | | | /'__`\ | |  /'___) /'_`\ /' _ ` _ `\ /'__`\
</span><span class='line'> | (_/ \_) |(  ___/ | | ( (___ ( (_) )| ( ) ( ) |(  ___/
</span><span class='line'> `\___x___/'`\____)(___)`\____)`\___/'(_) (_) (_)`\____)
</span><span class='line'>                                                        
</span><span class='line'>                                                                                                              
</span><span class='line'>I'm glad you could join me in my journey of learning Ruby, 
</span><span class='line'>Rails, vim, and tmux. I am still new in so many regards, and 
</span><span class='line'>I welcome your inputs, criticisms, and patience with my knowledge. 
</span><span class='line'>I am sure we will both work well together.
</span><span class='line'>
</span><span class='line'>Now that you have logged in, you can join my pairing session 
</span><span class='line'>by typing the following at your prompt:
</span><span class='line'>
</span><span class='line'>~~~
</span><span class='line'>tmux -S /usr/local/tmux/learning attach
</span><span class='line'>~~~
</span><span class='line'>
</span><span class='line'>Then increase the size of your terminal as far as it can go.
</span><span class='line'>If your screen resolution is larger than 1920x1200 your terminal 
</span><span class='line'>will be filled with dots outside of my screen's resolution.
</span><span class='line'>
</span><span class='line'>I tend to tab complete alot.  In Mac terminals this causes a *lot* 
</span><span class='line'>of audible bell sounds. If you want to turn them off, go to preferences, 
</span><span class='line'>Settings, and under the advanced tab, uncheck audible bell.
</span><span class='line'>
</span><span class='line'>Happy Pairing!
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM Automatic Registers]]></title>
    <link href="http://blog.jimnanney.com/blog/2013/05/06/vim-automatic-registers/"/>
    <updated>2013-05-06T19:48:00-05:00</updated>
    <id>http://blog.jimnanney.com/blog/2013/05/06/vim-automatic-registers</id>
    <content type="html"><![CDATA[<p>Vim adventures has taught me an incredible new (to me) trick.  The ability to paste a previously deleted line is easy.  Use <strong>p</strong> or <strong>P</strong> to paste it.  But what if it was the third time you hit <strong>dd</strong> and you wanted to paste in the first thing you deleted.  I cannot begin to count the number of times I needed to do that.  Further down, I&#8217;ll reveal this secret, but first the backstory:</p>

<p>Recently I saw a link to <a href="http://vim-adventures.com/" title="Vim Adventures">Vim-Adventures.com</a> and followed.  It was appealing, but seemed basic in the first three levels.  So I decided not to purchase the subscription.</p>

<p>And then, at Rails Conf 2013 in Portland, I met up with a friend who was working through one of the levels.  I immediately asked if she was playing vim adventures and she said yes and that she was stuck.  Of course I offered to assist.  This proved several points to me right away.</p>

<blockquote><p>First, I am not as good with VIM as I had thought.</p>

<p>Second, I am a horrible teacher of things I have little grasp on.</p>

<p>Third, Vim Adventures advances terribly quick after level 3 and is well worth the subscription.</p></blockquote>

<p>It was inevitable afterwards that I subscribed.  I have learned a ton, and the most profound ended up being the automatic buffers.</p>

<p>Here&#8217;s how they work:</p>

<p>Given these lines:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Delete me last.
</span><span class='line'>Delete me third.
</span><span class='line'>Delete me first.</span></code></pre></td></tr></table></div></figure>


<p>If you delete line three by using <strong>dd</strong>, followed by line one with another <strong>dd</strong> and then line two with again a <strong>dd</strong>, several deletion registers would be created.</p>

<p>You can see these by typing <strong>:reg</strong></p>

<p>First, notice they are numbered from <strong>&#8220;1</strong> to <strong>&#8220;9</strong> and that they are in order from first in to last in. They also rotate out as more are added.</p>

<p>So to paste the first deletion from above, you would use <strong>&#8220;3p</strong></p>

<p>This simple thing has bothered me many times, but not enough to look it up. After playing vim adventures to level 10, I&#8217;ve learned this new trick.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Pairing - Lessons Learned]]></title>
    <link href="http://blog.jimnanney.com/blog/2012/11/25/remote-pairing-lessons-learned/"/>
    <updated>2012-11-25T09:07:00-06:00</updated>
    <id>http://blog.jimnanney.com/blog/2012/11/25/remote-pairing-lessons-learned</id>
    <content type="html"><![CDATA[<p>When I first encountered and heard the term pair programming, I was amazed at the possibilities.  It takes programming to a communication exercise rather than logic puzzle, and gets two seperate minds working on the same problem.  Living in the location that I am in, pair programming was not an option unless it was remote.  Remote pairing seems like an exciting and productive way to work.</p>

<p>I have come close to what you might call pair programming while helping my wife learn Ruby.  She has worked on some small programs with me in the background giving advice and steering her in the right direction.  And she has once sat in the non-drivers seat and asked questions as I worked a problem.  However, this did not prepare me for remote pairing.</p>

<!-- More -->


<p>Yesterday, I took the plunge and paired with another person remotely. I am still very very new to ruby, rails, vim, tmux, git and collaborative programming.  It takes a lot of patience and understanding in that first session. It also takes a lot of preparation, of which I had done little.</p>

<p>The experience was extremely new and I had no idea of what to expect.  So much so that I didn&#8217;t have any defined questions that I was looking to have answered.  This should have served as a clue I needed to put off the session and do more homework and planning.</p>

<h3>The Pains:</h3>

<ul>
<li>tmux is a great tool, however keybinding and scrollbuffers are hard to overcome.</li>
<li>Google+ Hangouts and screensharing are slow, but essential to vercoming the small setup issues</li>
<li>Custom vim and tmux keybindings are also a hinderence. Less is more.</li>
<li>In your first session between two unfamiliar people, expect tool problems to be the big issue and take most of the time allotted.</li>
</ul>


<h3>Suggestions</h3>

<ul>
<li>The first time, pair with someone who has done it before, lean on their experience.</li>
<li>At least one person on the pair, should be familiar with the chosen editor, and with tmux or the screen sharing software.</li>
<li>Have a specific goal at the onset of the pair.  Small goals will help foster the sense of accomplishment needed.  No goals or large goals can make the experience frustrating.</li>
<li>Set a time limit and stick to it.</li>
<li>If stuck on a particular problem, table it for later. Pairing is about collaboration, not two people googling solutions while remoting.  If it is a showstopper, then agree to stop and agree to come back later once you both have had a chance to attempt the solution.</li>
<li>Pair programming is different than just writing code.  You are in constant communication and that is more exhausting than coding by yourself.</li>
<li>Each of you has their own strengths.  If you allow one person to drive and one to talk and stick with that strategy you can learn almost by osmosis.  It also presents the opportunity to ask &#8220;Hey, what was that you just did?&#8221;</li>
</ul>


<p>Overall I learned quite a bit about what not to do, and how to prepare. I would add that if it had not been for the patience of my pair, I would have had little chance to learn what I did.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My tmux config Explained]]></title>
    <link href="http://blog.jimnanney.com/blog/2012/11/24/my-tmux-config-explained/"/>
    <updated>2012-11-24T23:42:00-06:00</updated>
    <id>http://blog.jimnanney.com/blog/2012/11/24/my-tmux-config-explained</id>
    <content type="html"><![CDATA[<p>Before I get too far into my posts on pairing I wanted to start adding my configuration files and why I have chosen to use the pieces in them.</p>

<p>I must admit that prior to this week I had never used tmux.  I heard the ruby rogues talk about it on their podacst. However, being a previous Linux admin, I have used and taught others to use screen for any task that was important, or long running.  Largely due to the simple fact that a session could be detached and reattached.</p>

<p>Tmux is like screen on steroids.  I have never used panes within screen and tmux makes this easy to do.  With a few customizations it is incredibly useful, and your fingers rarely leave the home row on a keyboard!</p>

<!-- more -->


<p>
So before I break out the sections of my tmux.conf, I&#8217;ll present it in its entirety here.  As an aside, each of these things I got from Brian P. Hogan&#8217;s book called <a href="http://pragprog.com/book/bhtmux/tmux">&#8220;tmux: Productive Mouse-Free Development&#8221;</a>. (Not a referral link)</p>

<div><script src='https://gist.github.com/4142309.js?file='></script>
<noscript><pre><code>set -g prefix C-a
unbind C-b
set -s escape-time 1
set -g base-index 1
set -g pane-base-index 1
bind r source-file ~/.tmux.conf\; display &quot;Reloaded!&quot;
bind C-a send-prefix
bind | split-window -h
bind - split-window -v
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
set -g repeat-time 1000
set -g status-bg colour33
setw -g mode-keys vi</code></pre></noscript></div>


<p>Firstly, in screen every command is prefixed with Control A.  Tmux uses Control B.  I remap it to Control A and unbind the original Control B.  This is also very useful if you remap your caps lock key to control as then your fingers do not leave the home row.</p>

<figure class='code'><figcaption><span>Remap Prefix to Control-A </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set -g prefix C-a
</span><span class='line'>unbind C-b</span></code></pre></td></tr></table></div></figure>


<p>Next I set the escape detection time low to avoid conflicts with vim.  Further detail on this can be found in Brian P. Hogan&#8217;s book, but trust me, if you use vim in a tmux session, you&#8217;ll want this.</p>

<figure class='code'><figcaption><span>Fix Escape Detection </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set -s escape-time 1</span></code></pre></td></tr></table></div></figure>


<p>These next two are convenience only and should make VB programmers happy :P  All they do is set the start value of the numbering schemes for windows and panes to 1 instead of 0.</p>

<figure class='code'><figcaption><span>Renumber from 1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set -g base-index 1
</span><span class='line'>set -g pane-base-index 1</span></code></pre></td></tr></table></div></figure>


<p>Next while editing the tmux.conf file I want to be able to reload it with a shortcut key instead of <code>C-A :</code> followed by typing <code>source-file ~/.tmux.conf</code></p>

<figure class='code'><figcaption><span>Reload </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind r source-file ~/.tmux.conf\; display "Reloaded!"</span></code></pre></td></tr></table></div></figure>


<p>I also don&#8217;t want to remap away C-A from whatever programs I am using.  So I hit C-A twice and it gets sent to the underlying program instead of tmux with the following.</p>

<figure class='code'><figcaption><span>Send C-a to program </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind C-a send-prefix</span></code></pre></td></tr></table></div></figure>


<p>Tmux lets you split a window into panes horizontally and vertically with <code>C-a %</code> and <code>C-a "</code>  But the pipe and dash are more intuitive.</p>

<figure class='code'><figcaption><span>More intuitive Window Pane Splits </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind | split-window -h
</span><span class='line'>bind - split-window -v</span></code></pre></td></tr></table></div></figure>


<p>Now for the fun stuff.  I use vim constantly.  I am not good at it, but I use it nonetheless.  I want to move around the panes using vim&#8217;s movement keys.</p>

<figure class='code'><figcaption><span>Use vim&#8217;s h j k l movement keys </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind h select-pane -L
</span><span class='line'>bind j select-pane -D
</span><span class='line'>bind k select-pane -U
</span><span class='line'>bind l select-pane -R</span></code></pre></td></tr></table></div></figure>


<p>Switching windows should be the same way, using vim&#8217;s h and l movement keys. The -r makes it repeatable without having to press C-a again.</p>

<figure class='code'><figcaption><span>Use vim&#8217;s h and l to switch windows </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind -r C-h select-window -t :-
</span><span class='line'>bind -r C-l select-window -t :+</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s now add vim movement key emulations that go to resizing a pane.  The defaults are C-Arrow keys, but this isn&#8217;t home row friendly.  Again notice the -r. And also notice that the movement keys are capitalized.</p>

<figure class='code'><figcaption><span>Resize from home row keys </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind -r H resize-pane -L 5
</span><span class='line'>bind -r J resize-pane -D 5
</span><span class='line'>bind -r K resize-pane -U 5
</span><span class='line'>bind -r L resize-pane -R 5</span></code></pre></td></tr></table></div></figure>


<p>Now some of you are faster typists than I and won&#8217;t need this.  But I don&#8217;t want to repeat the C-a while resizing and I may pause less than a second to see the change.  This 1000 represents 1 whole second to repeat my last keystroke.</p>

<figure class='code'><figcaption><span>Longer delay for allowing a repeated keystroke </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set -g repeat-time 1000</span></code></pre></td></tr></table></div></figure>


<p>Next is the colors, which I&#8217;ll leave for you to get your own color schemes.  I am definitely not a designer.</p>

<p>Lastly when in the scroll mode which allows copy and scrollbuffer movement, I want to use the vi keystrokes to navigate the scrollbuffer.</p>

<figure class='code'><figcaption><span>Scroll Buffer Movement like Vim </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setw -g mode-keys vi</span></code></pre></td></tr></table></div></figure>


<p>And that is the end of my .tmux.conf explanation.  These will get you moving like vim and splitting panes all over the place.  Enjoy!</p>
]]></content>
  </entry>
  
</feed>
